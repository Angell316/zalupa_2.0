{"ast":null,"code":"/**\r\n * Утилиты для работы с Telegram WebApp API\r\n */\n\n// Объявляем типы для Telegram WebApp API\n\n// Проверяем, запущено ли приложение внутри Telegram\nexport const isRunningInTelegram = () => {\n  var _window$Telegram;\n  return Boolean((_window$Telegram = window.Telegram) === null || _window$Telegram === void 0 ? void 0 : _window$Telegram.WebApp);\n};\n\n// Получаем инстанс WebApp\nexport const getWebApp = () => {\n  if (!isRunningInTelegram()) {\n    console.warn('Приложение запущено вне Telegram');\n    return null;\n  }\n  return window.Telegram.WebApp;\n};\n\n// Получаем данные пользователя\nexport const getUserData = () => {\n  const webApp = getWebApp();\n  if (!webApp) return null;\n  try {\n    var _webApp$initDataUnsaf;\n    const userData = (_webApp$initDataUnsaf = webApp.initDataUnsafe) === null || _webApp$initDataUnsaf === void 0 ? void 0 : _webApp$initDataUnsaf.user;\n    return userData || null;\n  } catch (error) {\n    console.error('Ошибка при получении данных пользователя:', error);\n    return null;\n  }\n};\n\n// Получаем тему из Telegram\nexport const getTelegramTheme = () => {\n  const webApp = getWebApp();\n  if (!webApp) return null;\n  return webApp.themeParams;\n};\n\n// Показать всплывающее уведомление\nexport const showAlert = message => {\n  const webApp = getWebApp();\n  if (!webApp) {\n    alert(message);\n    return;\n  }\n  webApp.showAlert(message);\n};\n\n// Закрыть приложение\nexport const closeApp = () => {\n  const webApp = getWebApp();\n  if (!webApp) return;\n  webApp.close();\n};\n\n// Развернуть приложение на весь экран\nexport const expandApp = () => {\n  const webApp = getWebApp();\n  if (!webApp) return;\n  webApp.expand();\n};\n\n// Активировать кнопку \"Назад\" в Telegram\nexport const enableBackButton = callback => {\n  const webApp = getWebApp();\n  if (!webApp) return;\n  webApp.BackButton.show();\n  webApp.BackButton.onClick(callback);\n};\n\n// Деактивировать кнопку \"Назад\" в Telegram\nexport const disableBackButton = () => {\n  const webApp = getWebApp();\n  if (!webApp) return;\n  webApp.BackButton.hide();\n  webApp.BackButton.offClick();\n};\n\n// Показать модальное окно с подтверждением\nexport const showConfirm = (message, callback) => {\n  const webApp = getWebApp();\n  if (!webApp) {\n    const result = window.confirm(message);\n    callback(result);\n    return;\n  }\n  webApp.showConfirm(message, confirmed => {\n    callback(confirmed);\n  });\n};\n\n// HapticFeedback\nexport const vibrate = (type = 'impact') => {\n  const webApp = getWebApp();\n  if (!webApp || !webApp.HapticFeedback) return;\n  switch (type) {\n    case 'impact':\n      webApp.HapticFeedback.impactOccurred('medium');\n      break;\n    case 'notification':\n      webApp.HapticFeedback.notificationOccurred('success');\n      break;\n    case 'selection':\n      webApp.HapticFeedback.selectionChanged();\n      break;\n  }\n};","map":{"version":3,"names":["isRunningInTelegram","_window$Telegram","Boolean","window","Telegram","WebApp","getWebApp","console","warn","getUserData","webApp","_webApp$initDataUnsaf","userData","initDataUnsafe","user","error","getTelegramTheme","themeParams","showAlert","message","alert","closeApp","close","expandApp","expand","enableBackButton","callback","BackButton","show","onClick","disableBackButton","hide","offClick","showConfirm","result","confirm","confirmed","vibrate","type","HapticFeedback","impactOccurred","notificationOccurred","selectionChanged"],"sources":["C:/Users/Reko/Desktop/chtoto/telegram-mini-app/client/src/utils/telegram.ts"],"sourcesContent":["/**\r\n * Утилиты для работы с Telegram WebApp API\r\n */\r\n\r\n// Объявляем типы для Telegram WebApp API\r\ndeclare global {\r\n  interface Window {\r\n    Telegram: {\r\n      WebApp: any;\r\n    };\r\n  }\r\n}\r\n\r\n// Проверяем, запущено ли приложение внутри Telegram\r\nexport const isRunningInTelegram = (): boolean => {\r\n  return Boolean(window.Telegram?.WebApp);\r\n};\r\n\r\n// Получаем инстанс WebApp\r\nexport const getWebApp = () => {\r\n  if (!isRunningInTelegram()) {\r\n    console.warn('Приложение запущено вне Telegram');\r\n    return null;\r\n  }\r\n\r\n  return window.Telegram.WebApp;\r\n};\r\n\r\n// Получаем данные пользователя\r\nexport const getUserData = () => {\r\n  const webApp = getWebApp();\r\n  if (!webApp) return null;\r\n\r\n  try {\r\n    const userData = webApp.initDataUnsafe?.user;\r\n    return userData || null;\r\n  } catch (error) {\r\n    console.error('Ошибка при получении данных пользователя:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Получаем тему из Telegram\r\nexport const getTelegramTheme = (): any => {\r\n  const webApp = getWebApp();\r\n  if (!webApp) return null;\r\n  \r\n  return webApp.themeParams;\r\n};\r\n\r\n// Показать всплывающее уведомление\r\nexport const showAlert = (message: string): void => {\r\n  const webApp = getWebApp();\r\n  if (!webApp) {\r\n    alert(message);\r\n    return;\r\n  }\r\n\r\n  webApp.showAlert(message);\r\n};\r\n\r\n// Закрыть приложение\r\nexport const closeApp = (): void => {\r\n  const webApp = getWebApp();\r\n  if (!webApp) return;\r\n\r\n  webApp.close();\r\n};\r\n\r\n// Развернуть приложение на весь экран\r\nexport const expandApp = (): void => {\r\n  const webApp = getWebApp();\r\n  if (!webApp) return;\r\n  \r\n  webApp.expand();\r\n};\r\n\r\n// Активировать кнопку \"Назад\" в Telegram\r\nexport const enableBackButton = (callback: () => void): void => {\r\n  const webApp = getWebApp();\r\n  if (!webApp) return;\r\n\r\n  webApp.BackButton.show();\r\n  webApp.BackButton.onClick(callback);\r\n};\r\n\r\n// Деактивировать кнопку \"Назад\" в Telegram\r\nexport const disableBackButton = (): void => {\r\n  const webApp = getWebApp();\r\n  if (!webApp) return;\r\n\r\n  webApp.BackButton.hide();\r\n  webApp.BackButton.offClick();\r\n};\r\n\r\n// Показать модальное окно с подтверждением\r\nexport const showConfirm = (message: string, callback: (confirmed: boolean) => void): void => {\r\n  const webApp = getWebApp();\r\n  if (!webApp) {\r\n    const result = window.confirm(message);\r\n    callback(result);\r\n    return;\r\n  }\r\n\r\n  webApp.showConfirm(message, (confirmed: boolean) => {\r\n    callback(confirmed);\r\n  });\r\n};\r\n\r\n// HapticFeedback\r\nexport const vibrate = (type: 'impact' | 'notification' | 'selection' = 'impact'): void => {\r\n  const webApp = getWebApp();\r\n  if (!webApp || !webApp.HapticFeedback) return;\r\n\r\n  switch (type) {\r\n    case 'impact':\r\n      webApp.HapticFeedback.impactOccurred('medium');\r\n      break;\r\n    case 'notification':\r\n      webApp.HapticFeedback.notificationOccurred('success');\r\n      break;\r\n    case 'selection':\r\n      webApp.HapticFeedback.selectionChanged();\r\n      break;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}