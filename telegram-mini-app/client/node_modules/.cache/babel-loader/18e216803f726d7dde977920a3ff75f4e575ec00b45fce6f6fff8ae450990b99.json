{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reko\\\\Desktop\\\\chtoto\\\\telegram-mini-app\\\\client\\\\src\\\\pages\\\\SplashScreen\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './SplashScreen.scss';\nimport Loader from '../../components/common/Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SplashScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Имитация загрузки данных\n    const loadUserData = async () => {\n      try {\n        // Здесь будет логика загрузки данных пользователя\n        // и инициализация Telegram SDK\n\n        // Имитация задержки загрузки\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        setLoading(false);\n\n        // После загрузки перенаправляем на главную страницу\n        setTimeout(() => {\n          navigate('/home');\n        }, 500);\n      } catch (error) {\n        console.error('Ошибка при загрузке данных:', error);\n        // Должна быть обработка ошибки\n        setLoading(false);\n      }\n    };\n    loadUserData();\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"splash-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logo-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"eco\",\n          children: \"ECO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sim\",\n          children: \"SIM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(SplashScreen, \"4iP38C2EBbHdivfXoigmDQD/8fs=\", false, function () {\n  return [useNavigate];\n});\n_c = SplashScreen;\nexport default SplashScreen;\nvar _c;\n$RefreshReg$(_c, \"SplashScreen\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Loader","jsxDEV","_jsxDEV","SplashScreen","_s","navigate","loading","setLoading","loadUserData","Promise","resolve","setTimeout","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Reko/Desktop/chtoto/telegram-mini-app/client/src/pages/SplashScreen/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './SplashScreen.scss';\r\nimport Loader from '../../components/common/Loader';\r\n\r\nconst SplashScreen: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Имитация загрузки данных\r\n    const loadUserData = async () => {\r\n      try {\r\n        // Здесь будет логика загрузки данных пользователя\r\n        // и инициализация Telegram SDK\r\n        \r\n        // Имитация задержки загрузки\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        setLoading(false);\r\n        \r\n        // После загрузки перенаправляем на главную страницу\r\n        setTimeout(() => {\r\n          navigate('/home');\r\n        }, 500);\r\n      } catch (error) {\r\n        console.error('Ошибка при загрузке данных:', error);\r\n        // Должна быть обработка ошибки\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadUserData();\r\n  }, [navigate]);\r\n\r\n  return (\r\n    <div className=\"splash-screen\">\r\n      <div className=\"logo-container\">\r\n        <div className=\"logo\">\r\n          <span className=\"eco\">ECO</span>\r\n          <span className=\"sim\">SIM</span>\r\n        </div>\r\n        {loading && <Loader />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SplashScreen; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,qBAAqB;AAC5B,OAAOC,MAAM,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF;QACA;;QAEA;QACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;QAEvDH,UAAU,CAAC,KAAK,CAAC;;QAEjB;QACAI,UAAU,CAAC,MAAM;UACfN,QAAQ,CAAC,OAAO,CAAC;QACnB,CAAC,EAAE,GAAG,CAAC;MACT,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnD;QACAL,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;EAEd,oBACEH,OAAA;IAAKY,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC5Bb,OAAA;MAAKY,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7Bb,OAAA;QAAKY,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnBb,OAAA;UAAMY,SAAS,EAAC,KAAK;UAAAC,QAAA,EAAC;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAChCjB,OAAA;UAAMY,SAAS,EAAC,KAAK;UAAAC,QAAA,EAAC;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,EACLb,OAAO,iBAAIJ,OAAA,CAACF,MAAM;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACf,EAAA,CAzCID,YAAsB;EAAA,QACTJ,WAAW;AAAA;AAAAqB,EAAA,GADxBjB,YAAsB;AA2C5B,eAAeA,YAAY;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}