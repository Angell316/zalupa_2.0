{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reko\\\\Desktop\\\\chtoto\\\\telegram-mini-app\\\\client\\\\src\\\\context\\\\GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Определение типа контекста\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Создание контекста\nconst GameContext = /*#__PURE__*/createContext(undefined);\n\n// Провайдер контекста\n\n// Качество дропов и их множители\nconst QUALITY_MULTIPLIERS = {\n  common: 1.0,\n  rare: 2.5,\n  epic: 6.0,\n  legendary: 15.0\n};\n\n// Базовый доход дропа\nconst BASE_DROP_INCOME = 10; // 10 монет в час\n\nexport const GameProvider = ({\n  children\n}) => {\n  _s();\n  const [balance, setBalance] = useState(1000);\n  const [ownedBusinesses, setOwnedBusinesses] = useState([]);\n  const [availableBusinesses, setAvailableBusinesses] = useState([]);\n  const [drops, setDrops] = useState([]);\n  const [lostDrops24h, setLostDrops24h] = useState(0);\n  const [totalIncomePerHour, setTotalIncomePerHour] = useState(0);\n  const [dropsIncomePerHour, setDropsIncomePerHour] = useState(0);\n\n  // Рассчитываем общий доход от всех бизнесов\n  useEffect(() => {\n    const businessIncome = ownedBusinesses.reduce((sum, business) => sum + business.income_per_hour, 0);\n    setTotalIncomePerHour(businessIncome + dropsIncomePerHour);\n  }, [ownedBusinesses, dropsIncomePerHour]);\n\n  // Расчет дохода от дропов\n  useEffect(() => {\n    const dropsIncome = drops.reduce((sum, drop) => sum + drop.incomePerHour, 0);\n    setDropsIncomePerHour(dropsIncome);\n  }, [drops]);\n\n  // Симуляция поступления дохода\n  useEffect(() => {\n    const incomeInterval = setInterval(() => {\n      if (totalIncomePerHour > 0) {\n        setBalance(prevBalance => {\n          const incomePerSecond = totalIncomePerHour / 3600;\n          return parseFloat((prevBalance + incomePerSecond).toFixed(2));\n        });\n      }\n    }, 1000);\n    return () => clearInterval(incomeInterval);\n  }, [totalIncomePerHour]);\n\n  // Общее количество дропов\n  const totalDropsCount = drops.length;\n\n  // Функции для работы с бизнесами\n  const addBusiness = business => {\n    setOwnedBusinesses(prev => [...prev, business]);\n  };\n  const removeBusiness = businessId => {\n    setOwnedBusinesses(prev => prev.filter(b => b.business_id !== businessId));\n  };\n  const updateBusiness = updatedBusiness => {\n    setOwnedBusinesses(prev => prev.map(b => b.business_id === updatedBusiness.business_id ? updatedBusiness : b));\n  };\n  const getMostProfitableBusiness = () => {\n    if (ownedBusinesses.length === 0) return null;\n    return ownedBusinesses.reduce((mostProfitable, current) => current.income_per_hour > mostProfitable.income_per_hour ? current : mostProfitable, ownedBusinesses[0]);\n  };\n\n  // Функции для работы с дропами\n  const addDrop = drop => {\n    setDrops(prev => [...prev, drop]);\n  };\n  const removeDrop = dropId => {\n    setDrops(prev => prev.filter(d => d.id !== dropId));\n    setLostDrops24h(prev => prev + 1);\n  };\n  const upgradeDrop = dropId => {\n    const dropIndex = drops.findIndex(d => d.id === dropId);\n    if (dropIndex === -1) return;\n    const drop = drops[dropIndex];\n    const upgradeCost = Math.floor(100 * Math.pow(1.5, drop.level));\n    if (balance >= upgradeCost) {\n      const updatedDrop = {\n        ...drop,\n        level: drop.level + 1,\n        incomeMultiplier: (drop.incomeMultiplier || 1) * 1.2,\n        // +20% к множителю\n        incomePerHour: BASE_DROP_INCOME * QUALITY_MULTIPLIERS[drop.quality] * drop.level * 1.2\n      };\n      const updatedDrops = [...drops];\n      updatedDrops[dropIndex] = updatedDrop;\n      setDrops(updatedDrops);\n      setBalance(balance - upgradeCost);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      balance,\n      setBalance,\n      ownedBusinesses,\n      setOwnedBusinesses,\n      availableBusinesses,\n      setAvailableBusinesses,\n      drops,\n      setDrops,\n      lostDrops24h,\n      totalDropsCount,\n      totalIncomePerHour,\n      dropsIncomePerHour,\n      addBusiness,\n      removeBusiness,\n      updateBusiness,\n      getMostProfitableBusiness,\n      addDrop,\n      removeDrop,\n      upgradeDrop\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n\n// Хук для использования контекста\n_s(GameProvider, \"sfGxmrcIaQmiMwHS3LrOXvs2Yxk=\");\n_c = GameProvider;\nexport const useGame = () => {\n  _s2();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n_s2(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default GameContext;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","GameContext","undefined","QUALITY_MULTIPLIERS","common","rare","epic","legendary","BASE_DROP_INCOME","GameProvider","children","_s","balance","setBalance","ownedBusinesses","setOwnedBusinesses","availableBusinesses","setAvailableBusinesses","drops","setDrops","lostDrops24h","setLostDrops24h","totalIncomePerHour","setTotalIncomePerHour","dropsIncomePerHour","setDropsIncomePerHour","businessIncome","reduce","sum","business","income_per_hour","dropsIncome","drop","incomePerHour","incomeInterval","setInterval","prevBalance","incomePerSecond","parseFloat","toFixed","clearInterval","totalDropsCount","length","addBusiness","prev","removeBusiness","businessId","filter","b","business_id","updateBusiness","updatedBusiness","map","getMostProfitableBusiness","mostProfitable","current","addDrop","removeDrop","dropId","d","id","upgradeDrop","dropIndex","findIndex","upgradeCost","Math","floor","pow","level","updatedDrop","incomeMultiplier","quality","updatedDrops","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGame","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Reko/Desktop/chtoto/telegram-mini-app/client/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { Business, AvailableBusiness } from '../types/business';\nimport { Drop } from '../types/drop';\n\n// Определение типа контекста\ninterface GameContextType {\n  balance: number;\n  setBalance: (balance: number) => void;\n  ownedBusinesses: Business[];\n  setOwnedBusinesses: (businesses: Business[]) => void;\n  availableBusinesses: AvailableBusiness[];\n  setAvailableBusinesses: (businesses: AvailableBusiness[]) => void;\n  drops: Drop[];\n  setDrops: (drops: Drop[]) => void;\n  lostDrops24h: number;\n  totalDropsCount: number;\n  totalIncomePerHour: number;\n  dropsIncomePerHour: number;\n  addBusiness: (business: Business) => void;\n  removeBusiness: (businessId: string) => void;\n  updateBusiness: (updatedBusiness: Business) => void;\n  getMostProfitableBusiness: () => Business | null;\n  addDrop: (drop: Drop) => void;\n  removeDrop: (dropId: string) => void;\n  upgradeDrop: (dropId: string) => void;\n}\n\n// Создание контекста\nconst GameContext = createContext<GameContextType | undefined>(undefined);\n\n// Провайдер контекста\ninterface GameProviderProps {\n  children: ReactNode;\n}\n\n// Качество дропов и их множители\nconst QUALITY_MULTIPLIERS: Record<string, number> = {\n  common: 1.0,\n  rare: 2.5,\n  epic: 6.0,\n  legendary: 15.0\n};\n\n// Базовый доход дропа\nconst BASE_DROP_INCOME = 10; // 10 монет в час\n\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\n  const [balance, setBalance] = useState<number>(1000);\n  const [ownedBusinesses, setOwnedBusinesses] = useState<Business[]>([]);\n  const [availableBusinesses, setAvailableBusinesses] = useState<AvailableBusiness[]>([]);\n  const [drops, setDrops] = useState<Drop[]>([]);\n  const [lostDrops24h, setLostDrops24h] = useState<number>(0);\n  const [totalIncomePerHour, setTotalIncomePerHour] = useState<number>(0);\n  const [dropsIncomePerHour, setDropsIncomePerHour] = useState<number>(0);\n\n  // Рассчитываем общий доход от всех бизнесов\n  useEffect(() => {\n    const businessIncome = ownedBusinesses.reduce((sum, business) => sum + business.income_per_hour, 0);\n    setTotalIncomePerHour(businessIncome + dropsIncomePerHour);\n  }, [ownedBusinesses, dropsIncomePerHour]);\n\n  // Расчет дохода от дропов\n  useEffect(() => {\n    const dropsIncome = drops.reduce((sum, drop) => sum + drop.incomePerHour, 0);\n    setDropsIncomePerHour(dropsIncome);\n  }, [drops]);\n\n  // Симуляция поступления дохода\n  useEffect(() => {\n    const incomeInterval = setInterval(() => {\n      if (totalIncomePerHour > 0) {\n        setBalance(prevBalance => {\n          const incomePerSecond = totalIncomePerHour / 3600;\n          return parseFloat((prevBalance + incomePerSecond).toFixed(2));\n        });\n      }\n    }, 1000);\n\n    return () => clearInterval(incomeInterval);\n  }, [totalIncomePerHour]);\n\n  // Общее количество дропов\n  const totalDropsCount = drops.length;\n\n  // Функции для работы с бизнесами\n  const addBusiness = (business: Business) => {\n    setOwnedBusinesses(prev => [...prev, business]);\n  };\n\n  const removeBusiness = (businessId: string) => {\n    setOwnedBusinesses(prev => prev.filter(b => b.business_id !== businessId));\n  };\n\n  const updateBusiness = (updatedBusiness: Business) => {\n    setOwnedBusinesses(prev => \n      prev.map(b => b.business_id === updatedBusiness.business_id ? updatedBusiness : b)\n    );\n  };\n\n  const getMostProfitableBusiness = (): Business | null => {\n    if (ownedBusinesses.length === 0) return null;\n    \n    return ownedBusinesses.reduce((mostProfitable, current) => \n      current.income_per_hour > mostProfitable.income_per_hour ? current : mostProfitable\n    , ownedBusinesses[0]);\n  };\n\n  // Функции для работы с дропами\n  const addDrop = (drop: Drop) => {\n    setDrops(prev => [...prev, drop]);\n  };\n\n  const removeDrop = (dropId: string) => {\n    setDrops(prev => prev.filter(d => d.id !== dropId));\n    setLostDrops24h(prev => prev + 1);\n  };\n\n  const upgradeDrop = (dropId: string) => {\n    const dropIndex = drops.findIndex(d => d.id === dropId);\n    if (dropIndex === -1) return;\n\n    const drop = drops[dropIndex];\n    const upgradeCost = Math.floor(100 * Math.pow(1.5, drop.level));\n\n    if (balance >= upgradeCost) {\n      const updatedDrop: Drop = {\n        ...drop,\n        level: drop.level + 1,\n        incomeMultiplier: ((drop as any).incomeMultiplier || 1) * 1.2, // +20% к множителю\n        incomePerHour: BASE_DROP_INCOME * QUALITY_MULTIPLIERS[drop.quality] * drop.level * 1.2\n      };\n\n      const updatedDrops = [...drops];\n      updatedDrops[dropIndex] = updatedDrop;\n\n      setDrops(updatedDrops);\n      setBalance(balance - upgradeCost);\n    }\n  };\n\n  return (\n    <GameContext.Provider value={{\n      balance,\n      setBalance,\n      ownedBusinesses,\n      setOwnedBusinesses,\n      availableBusinesses,\n      setAvailableBusinesses,\n      drops,\n      setDrops,\n      lostDrops24h,\n      totalDropsCount,\n      totalIncomePerHour,\n      dropsIncomePerHour,\n      addBusiness,\n      removeBusiness,\n      updateBusiness,\n      getMostProfitableBusiness,\n      addDrop,\n      removeDrop,\n      upgradeDrop\n    }}>\n      {children}\n    </GameContext.Provider>\n  );\n};\n\n// Хук для использования контекста\nexport const useGame = (): GameContextType => {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n\nexport default GameContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;;AAIxF;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAuBA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAA8BO,SAAS,CAAC;;AAEzE;;AAKA;AACA,MAAMC,mBAA2C,GAAG;EAClDC,MAAM,EAAE,GAAG;EACXC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,GAAG;EACTC,SAAS,EAAE;AACb,CAAC;;AAED;AACA,MAAMC,gBAAgB,GAAG,EAAE,CAAC,CAAC;;AAE7B,OAAO,MAAMC,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAS,IAAI,CAAC;EACpD,MAAM,CAACiB,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAAa,EAAE,CAAC;EACtE,MAAM,CAACmB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGpB,QAAQ,CAAsB,EAAE,CAAC;EACvF,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAS,CAAC,CAAC;EAC3D,MAAM,CAACyB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG1B,QAAQ,CAAS,CAAC,CAAC;EACvE,MAAM,CAAC2B,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG5B,QAAQ,CAAS,CAAC,CAAC;;EAEvE;EACAC,SAAS,CAAC,MAAM;IACd,MAAM4B,cAAc,GAAGZ,eAAe,CAACa,MAAM,CAAC,CAACC,GAAG,EAAEC,QAAQ,KAAKD,GAAG,GAAGC,QAAQ,CAACC,eAAe,EAAE,CAAC,CAAC;IACnGP,qBAAqB,CAACG,cAAc,GAAGF,kBAAkB,CAAC;EAC5D,CAAC,EAAE,CAACV,eAAe,EAAEU,kBAAkB,CAAC,CAAC;;EAEzC;EACA1B,SAAS,CAAC,MAAM;IACd,MAAMiC,WAAW,GAAGb,KAAK,CAACS,MAAM,CAAC,CAACC,GAAG,EAAEI,IAAI,KAAKJ,GAAG,GAAGI,IAAI,CAACC,aAAa,EAAE,CAAC,CAAC;IAC5ER,qBAAqB,CAACM,WAAW,CAAC;EACpC,CAAC,EAAE,CAACb,KAAK,CAAC,CAAC;;EAEX;EACApB,SAAS,CAAC,MAAM;IACd,MAAMoC,cAAc,GAAGC,WAAW,CAAC,MAAM;MACvC,IAAIb,kBAAkB,GAAG,CAAC,EAAE;QAC1BT,UAAU,CAACuB,WAAW,IAAI;UACxB,MAAMC,eAAe,GAAGf,kBAAkB,GAAG,IAAI;UACjD,OAAOgB,UAAU,CAAC,CAACF,WAAW,GAAGC,eAAe,EAAEE,OAAO,CAAC,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC;MACJ;IACF,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMC,aAAa,CAACN,cAAc,CAAC;EAC5C,CAAC,EAAE,CAACZ,kBAAkB,CAAC,CAAC;;EAExB;EACA,MAAMmB,eAAe,GAAGvB,KAAK,CAACwB,MAAM;;EAEpC;EACA,MAAMC,WAAW,GAAId,QAAkB,IAAK;IAC1Cd,kBAAkB,CAAC6B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEf,QAAQ,CAAC,CAAC;EACjD,CAAC;EAED,MAAMgB,cAAc,GAAIC,UAAkB,IAAK;IAC7C/B,kBAAkB,CAAC6B,IAAI,IAAIA,IAAI,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,WAAW,KAAKH,UAAU,CAAC,CAAC;EAC5E,CAAC;EAED,MAAMI,cAAc,GAAIC,eAAyB,IAAK;IACpDpC,kBAAkB,CAAC6B,IAAI,IACrBA,IAAI,CAACQ,GAAG,CAACJ,CAAC,IAAIA,CAAC,CAACC,WAAW,KAAKE,eAAe,CAACF,WAAW,GAAGE,eAAe,GAAGH,CAAC,CACnF,CAAC;EACH,CAAC;EAED,MAAMK,yBAAyB,GAAGA,CAAA,KAAuB;IACvD,IAAIvC,eAAe,CAAC4B,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;IAE7C,OAAO5B,eAAe,CAACa,MAAM,CAAC,CAAC2B,cAAc,EAAEC,OAAO,KACpDA,OAAO,CAACzB,eAAe,GAAGwB,cAAc,CAACxB,eAAe,GAAGyB,OAAO,GAAGD,cAAc,EACnFxC,eAAe,CAAC,CAAC,CAAC,CAAC;EACvB,CAAC;;EAED;EACA,MAAM0C,OAAO,GAAIxB,IAAU,IAAK;IAC9Bb,QAAQ,CAACyB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEZ,IAAI,CAAC,CAAC;EACnC,CAAC;EAED,MAAMyB,UAAU,GAAIC,MAAc,IAAK;IACrCvC,QAAQ,CAACyB,IAAI,IAAIA,IAAI,CAACG,MAAM,CAACY,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKF,MAAM,CAAC,CAAC;IACnDrC,eAAe,CAACuB,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;EACnC,CAAC;EAED,MAAMiB,WAAW,GAAIH,MAAc,IAAK;IACtC,MAAMI,SAAS,GAAG5C,KAAK,CAAC6C,SAAS,CAACJ,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKF,MAAM,CAAC;IACvD,IAAII,SAAS,KAAK,CAAC,CAAC,EAAE;IAEtB,MAAM9B,IAAI,GAAGd,KAAK,CAAC4C,SAAS,CAAC;IAC7B,MAAME,WAAW,GAAGC,IAAI,CAACC,KAAK,CAAC,GAAG,GAAGD,IAAI,CAACE,GAAG,CAAC,GAAG,EAAEnC,IAAI,CAACoC,KAAK,CAAC,CAAC;IAE/D,IAAIxD,OAAO,IAAIoD,WAAW,EAAE;MAC1B,MAAMK,WAAiB,GAAG;QACxB,GAAGrC,IAAI;QACPoC,KAAK,EAAEpC,IAAI,CAACoC,KAAK,GAAG,CAAC;QACrBE,gBAAgB,EAAE,CAAEtC,IAAI,CAASsC,gBAAgB,IAAI,CAAC,IAAI,GAAG;QAAE;QAC/DrC,aAAa,EAAEzB,gBAAgB,GAAGL,mBAAmB,CAAC6B,IAAI,CAACuC,OAAO,CAAC,GAAGvC,IAAI,CAACoC,KAAK,GAAG;MACrF,CAAC;MAED,MAAMI,YAAY,GAAG,CAAC,GAAGtD,KAAK,CAAC;MAC/BsD,YAAY,CAACV,SAAS,CAAC,GAAGO,WAAW;MAErClD,QAAQ,CAACqD,YAAY,CAAC;MACtB3D,UAAU,CAACD,OAAO,GAAGoD,WAAW,CAAC;IACnC;EACF,CAAC;EAED,oBACEhE,OAAA,CAACC,WAAW,CAACwE,QAAQ;IAACC,KAAK,EAAE;MAC3B9D,OAAO;MACPC,UAAU;MACVC,eAAe;MACfC,kBAAkB;MAClBC,mBAAmB;MACnBC,sBAAsB;MACtBC,KAAK;MACLC,QAAQ;MACRC,YAAY;MACZqB,eAAe;MACfnB,kBAAkB;MAClBE,kBAAkB;MAClBmB,WAAW;MACXE,cAAc;MACdK,cAAc;MACdG,yBAAyB;MACzBG,OAAO;MACPC,UAAU;MACVI;IACF,CAAE;IAAAnD,QAAA,EACCA;EAAQ;IAAAiE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAnE,EAAA,CAzHaF,YAAyC;AAAAsE,EAAA,GAAzCtE,YAAyC;AA0HtD,OAAO,MAAMuE,OAAO,GAAGA,CAAA,KAAuB;EAAAC,GAAA;EAC5C,MAAMC,OAAO,GAAGtF,UAAU,CAACK,WAAW,CAAC;EACvC,IAAIiF,OAAO,KAAKhF,SAAS,EAAE;IACzB,MAAM,IAAIiF,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAQpB,eAAe/E,WAAW;AAAC,IAAA8E,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}