{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reko\\\\Desktop\\\\chtoto\\\\telegram-mini-app\\\\client\\\\src\\\\context\\\\GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { DropQuality } from '../types/drop';\n\n// Определение типа контекста\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Создание контекста\nconst GameContext = /*#__PURE__*/createContext(undefined);\n\n// Мок-данные для дропов\nconst mockDrops = [{\n  id: '1',\n  name: 'Иван Петров',\n  quality: DropQuality.COMMON,\n  level: 1,\n  income: 10,\n  isActive: true,\n  expiresAt: new Date(Date.now() + 1000 * 60 * 60 * 24 * 3),\n  // 3 дня\n  upgradePrice: 500,\n  renewPrice: 200\n}, {\n  id: '2',\n  name: 'Анна Сидорова',\n  quality: DropQuality.RARE,\n  level: 2,\n  avatarUrl: 'https://i.pravatar.cc/150?img=2',\n  income: 50,\n  isActive: true,\n  expiresAt: new Date(Date.now() + 1000 * 60 * 60 * 24 * 5),\n  // 5 дней\n  upgradePrice: 1500,\n  renewPrice: 500\n}];\n\n// Провайдер контекста\n\nexport const GameProvider = ({\n  children\n}) => {\n  _s();\n  const [balance, setBalance] = useState(1000);\n  const [ownedBusinesses, setOwnedBusinesses] = useState([]);\n  const [availableBusinesses, setAvailableBusinesses] = useState([]);\n  const [drops, setDrops] = useState(mockDrops);\n  const [dropsStats, setDropsStats] = useState({\n    totalDrops: mockDrops.length,\n    activeDrops: mockDrops.filter(d => d.isActive).length,\n    lostDrops24h: 0,\n    totalIncome: mockDrops.filter(d => d.isActive).reduce((sum, drop) => sum + drop.income, 0)\n  });\n  const [totalIncomePerHour, setTotalIncomePerHour] = useState(0);\n\n  // Рассчитываем общий доход от всех бизнесов и дропов\n  useEffect(() => {\n    const businessIncome = ownedBusinesses.reduce((sum, business) => sum + business.income_per_hour, 0);\n    const dropsIncome = drops.filter(drop => drop.isActive).reduce((sum, drop) => sum + drop.income, 0);\n    setTotalIncomePerHour(businessIncome + dropsIncome);\n\n    // Обновляем статистику дропов\n    updateDropsStats();\n  }, [ownedBusinesses, drops]);\n\n  // Обновление статистики дропов\n  const updateDropsStats = () => {\n    const activeDrops = drops.filter(drop => drop.isActive);\n    const dropsIncome = activeDrops.reduce((sum, drop) => sum + drop.income, 0);\n\n    // Подсчет потерянных дропов за последние 24 часа\n    const oneDayAgo = Date.now() - 24 * 60 * 60 * 1000;\n    const lostDrops24h = drops.filter(drop => !drop.isActive && drop.expiresAt && drop.expiresAt.getTime() > oneDayAgo).length;\n    setDropsStats({\n      totalDrops: drops.length,\n      activeDrops: activeDrops.length,\n      lostDrops24h,\n      totalIncome: dropsIncome\n    });\n  };\n\n  // Симуляция поступления дохода\n  useEffect(() => {\n    const incomeInterval = setInterval(() => {\n      if (totalIncomePerHour > 0) {\n        setBalance(prevBalance => {\n          const incomePerSecond = totalIncomePerHour / 3600;\n          return parseFloat((prevBalance + incomePerSecond).toFixed(2));\n        });\n      }\n    }, 1000);\n    return () => clearInterval(incomeInterval);\n  }, [totalIncomePerHour]);\n\n  // Функции для работы с бизнесами\n  const addBusiness = business => {\n    setOwnedBusinesses(prev => [...prev, business]);\n  };\n  const removeBusiness = businessId => {\n    setOwnedBusinesses(prev => prev.filter(b => b.business_id !== businessId));\n  };\n  const updateBusiness = updatedBusiness => {\n    setOwnedBusinesses(prev => prev.map(b => b.business_id === updatedBusiness.business_id ? updatedBusiness : b));\n  };\n  const getMostProfitableBusiness = () => {\n    if (ownedBusinesses.length === 0) return null;\n    return ownedBusinesses.reduce((mostProfitable, current) => current.income_per_hour > mostProfitable.income_per_hour ? current : mostProfitable, ownedBusinesses[0]);\n  };\n\n  // Функции для работы с дропами\n  const upgradeDropLevel = dropId => {\n    const dropToUpgrade = drops.find(d => d.id === dropId);\n    if (!dropToUpgrade || !dropToUpgrade.isActive || balance < dropToUpgrade.upgradePrice) return;\n    setBalance(prev => prev - dropToUpgrade.upgradePrice);\n    setDrops(prev => prev.map(drop => {\n      if (drop.id === dropId) {\n        const newLevel = drop.level + 1;\n        const newIncome = Math.floor(drop.income * 1.5);\n        const newUpgradePrice = Math.floor(drop.upgradePrice * 1.8);\n        return {\n          ...drop,\n          level: newLevel,\n          income: newIncome,\n          upgradePrice: newUpgradePrice\n        };\n      }\n      return drop;\n    }));\n  };\n  const renewDrop = dropId => {\n    const dropToRenew = drops.find(d => d.id === dropId);\n    if (!dropToRenew || balance < dropToRenew.renewPrice) return;\n    setBalance(prev => prev - dropToRenew.renewPrice);\n    setDrops(prev => prev.map(drop => {\n      if (drop.id === dropId) {\n        // Продлеваем на 7 дней\n        const newExpiresAt = new Date();\n        newExpiresAt.setDate(newExpiresAt.getDate() + 7);\n        return {\n          ...drop,\n          isActive: true,\n          expiresAt: newExpiresAt\n        };\n      }\n      return drop;\n    }));\n  };\n  const releaseDrop = dropId => {\n    setDrops(prev => prev.filter(drop => drop.id !== dropId));\n  };\n  const getMostProfitableDrop = () => {\n    const activeDrops = drops.filter(drop => drop.isActive);\n    if (activeDrops.length === 0) return null;\n    return activeDrops.reduce((mostProfitable, current) => current.income > mostProfitable.income ? current : mostProfitable, activeDrops[0]);\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      balance,\n      setBalance,\n      ownedBusinesses,\n      setOwnedBusinesses,\n      availableBusinesses,\n      setAvailableBusinesses,\n      drops,\n      setDrops,\n      dropsStats,\n      totalIncomePerHour,\n      addBusiness,\n      removeBusiness,\n      updateBusiness,\n      getMostProfitableBusiness,\n      upgradeDropLevel,\n      renewDrop,\n      releaseDrop,\n      getMostProfitableDrop\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n\n// Хук для использования контекста\n_s(GameProvider, \"6kQjwkEnLj2vKS9uMZv1VF8uiu4=\");\n_c = GameProvider;\nexport const useGame = () => {\n  _s2();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n_s2(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default GameContext;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","DropQuality","jsxDEV","_jsxDEV","GameContext","undefined","mockDrops","id","name","quality","COMMON","level","income","isActive","expiresAt","Date","now","upgradePrice","renewPrice","RARE","avatarUrl","GameProvider","children","_s","balance","setBalance","ownedBusinesses","setOwnedBusinesses","availableBusinesses","setAvailableBusinesses","drops","setDrops","dropsStats","setDropsStats","totalDrops","length","activeDrops","filter","d","lostDrops24h","totalIncome","reduce","sum","drop","totalIncomePerHour","setTotalIncomePerHour","businessIncome","business","income_per_hour","dropsIncome","updateDropsStats","oneDayAgo","getTime","incomeInterval","setInterval","prevBalance","incomePerSecond","parseFloat","toFixed","clearInterval","addBusiness","prev","removeBusiness","businessId","b","business_id","updateBusiness","updatedBusiness","map","getMostProfitableBusiness","mostProfitable","current","upgradeDropLevel","dropId","dropToUpgrade","find","newLevel","newIncome","Math","floor","newUpgradePrice","renewDrop","dropToRenew","newExpiresAt","setDate","getDate","releaseDrop","getMostProfitableDrop","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGame","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Reko/Desktop/chtoto/telegram-mini-app/client/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { Business, AvailableBusiness } from '../types/business';\r\nimport { Drop, DropQuality, DropsStats, calculateDropIncome } from '../types/drop';\r\n\r\n// Определение типа контекста\r\ninterface GameContextType {\r\n  balance: number;\r\n  setBalance: (balance: number) => void;\r\n  ownedBusinesses: Business[];\r\n  setOwnedBusinesses: (businesses: Business[]) => void;\r\n  availableBusinesses: AvailableBusiness[];\r\n  setAvailableBusinesses: (businesses: AvailableBusiness[]) => void;\r\n  drops: Drop[];\r\n  setDrops: (drops: Drop[]) => void;\r\n  dropsStats: DropsStats;\r\n  totalIncomePerHour: number;\r\n  addBusiness: (business: Business) => void;\r\n  removeBusiness: (businessId: string) => void;\r\n  updateBusiness: (updatedBusiness: Business) => void;\r\n  getMostProfitableBusiness: () => Business | null;\r\n  upgradeDropLevel: (dropId: string) => void;\r\n  renewDrop: (dropId: string) => void;\r\n  releaseDrop: (dropId: string) => void;\r\n  getMostProfitableDrop: () => Drop | null;\r\n}\r\n\r\n// Создание контекста\r\nconst GameContext = createContext<GameContextType | undefined>(undefined);\r\n\r\n// Мок-данные для дропов\r\nconst mockDrops: Drop[] = [\r\n  {\r\n    id: '1',\r\n    name: 'Иван Петров',\r\n    quality: DropQuality.COMMON,\r\n    level: 1,\r\n    income: 10,\r\n    isActive: true,\r\n    expiresAt: new Date(Date.now() + 1000 * 60 * 60 * 24 * 3), // 3 дня\r\n    upgradePrice: 500,\r\n    renewPrice: 200\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Анна Сидорова',\r\n    quality: DropQuality.RARE,\r\n    level: 2,\r\n    avatarUrl: 'https://i.pravatar.cc/150?img=2',\r\n    income: 50,\r\n    isActive: true,\r\n    expiresAt: new Date(Date.now() + 1000 * 60 * 60 * 24 * 5), // 5 дней\r\n    upgradePrice: 1500,\r\n    renewPrice: 500\r\n  }\r\n];\r\n\r\n// Провайдер контекста\r\ninterface GameProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\r\n  const [balance, setBalance] = useState<number>(1000);\r\n  const [ownedBusinesses, setOwnedBusinesses] = useState<Business[]>([]);\r\n  const [availableBusinesses, setAvailableBusinesses] = useState<AvailableBusiness[]>([]);\r\n  const [drops, setDrops] = useState<Drop[]>(mockDrops);\r\n  const [dropsStats, setDropsStats] = useState<DropsStats>({\r\n    totalDrops: mockDrops.length,\r\n    activeDrops: mockDrops.filter(d => d.isActive).length,\r\n    lostDrops24h: 0,\r\n    totalIncome: mockDrops.filter(d => d.isActive).reduce((sum, drop) => sum + drop.income, 0)\r\n  });\r\n  const [totalIncomePerHour, setTotalIncomePerHour] = useState<number>(0);\r\n\r\n  // Рассчитываем общий доход от всех бизнесов и дропов\r\n  useEffect(() => {\r\n    const businessIncome = ownedBusinesses.reduce((sum, business) => sum + business.income_per_hour, 0);\r\n    const dropsIncome = drops.filter(drop => drop.isActive).reduce((sum, drop) => sum + drop.income, 0);\r\n    setTotalIncomePerHour(businessIncome + dropsIncome);\r\n    \r\n    // Обновляем статистику дропов\r\n    updateDropsStats();\r\n  }, [ownedBusinesses, drops]);\r\n\r\n  // Обновление статистики дропов\r\n  const updateDropsStats = () => {\r\n    const activeDrops = drops.filter(drop => drop.isActive);\r\n    const dropsIncome = activeDrops.reduce((sum, drop) => sum + drop.income, 0);\r\n    \r\n    // Подсчет потерянных дропов за последние 24 часа\r\n    const oneDayAgo = Date.now() - 24 * 60 * 60 * 1000;\r\n    const lostDrops24h = drops.filter(drop => \r\n      !drop.isActive && drop.expiresAt && drop.expiresAt.getTime() > oneDayAgo\r\n    ).length;\r\n    \r\n    setDropsStats({\r\n      totalDrops: drops.length,\r\n      activeDrops: activeDrops.length,\r\n      lostDrops24h,\r\n      totalIncome: dropsIncome\r\n    });\r\n  };\r\n\r\n  // Симуляция поступления дохода\r\n  useEffect(() => {\r\n    const incomeInterval = setInterval(() => {\r\n      if (totalIncomePerHour > 0) {\r\n        setBalance(prevBalance => {\r\n          const incomePerSecond = totalIncomePerHour / 3600;\r\n          return parseFloat((prevBalance + incomePerSecond).toFixed(2));\r\n        });\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(incomeInterval);\r\n  }, [totalIncomePerHour]);\r\n\r\n  // Функции для работы с бизнесами\r\n  const addBusiness = (business: Business) => {\r\n    setOwnedBusinesses(prev => [...prev, business]);\r\n  };\r\n\r\n  const removeBusiness = (businessId: string) => {\r\n    setOwnedBusinesses(prev => prev.filter(b => b.business_id !== businessId));\r\n  };\r\n\r\n  const updateBusiness = (updatedBusiness: Business) => {\r\n    setOwnedBusinesses(prev => \r\n      prev.map(b => b.business_id === updatedBusiness.business_id ? updatedBusiness : b)\r\n    );\r\n  };\r\n\r\n  const getMostProfitableBusiness = (): Business | null => {\r\n    if (ownedBusinesses.length === 0) return null;\r\n    \r\n    return ownedBusinesses.reduce((mostProfitable, current) => \r\n      current.income_per_hour > mostProfitable.income_per_hour ? current : mostProfitable\r\n    , ownedBusinesses[0]);\r\n  };\r\n  \r\n  // Функции для работы с дропами\r\n  const upgradeDropLevel = (dropId: string) => {\r\n    const dropToUpgrade = drops.find(d => d.id === dropId);\r\n    if (!dropToUpgrade || !dropToUpgrade.isActive || balance < dropToUpgrade.upgradePrice) return;\r\n    \r\n    setBalance(prev => prev - dropToUpgrade.upgradePrice);\r\n    \r\n    setDrops(prev => prev.map(drop => {\r\n      if (drop.id === dropId) {\r\n        const newLevel = drop.level + 1;\r\n        const newIncome = Math.floor(drop.income * 1.5);\r\n        const newUpgradePrice = Math.floor(drop.upgradePrice * 1.8);\r\n        \r\n        return {\r\n          ...drop,\r\n          level: newLevel,\r\n          income: newIncome,\r\n          upgradePrice: newUpgradePrice\r\n        };\r\n      }\r\n      return drop;\r\n    }));\r\n  };\r\n  \r\n  const renewDrop = (dropId: string) => {\r\n    const dropToRenew = drops.find(d => d.id === dropId);\r\n    if (!dropToRenew || balance < dropToRenew.renewPrice) return;\r\n    \r\n    setBalance(prev => prev - dropToRenew.renewPrice);\r\n    \r\n    setDrops(prev => prev.map(drop => {\r\n      if (drop.id === dropId) {\r\n        // Продлеваем на 7 дней\r\n        const newExpiresAt = new Date();\r\n        newExpiresAt.setDate(newExpiresAt.getDate() + 7);\r\n        \r\n        return {\r\n          ...drop,\r\n          isActive: true,\r\n          expiresAt: newExpiresAt\r\n        };\r\n      }\r\n      return drop;\r\n    }));\r\n  };\r\n  \r\n  const releaseDrop = (dropId: string) => {\r\n    setDrops(prev => prev.filter(drop => drop.id !== dropId));\r\n  };\r\n  \r\n  const getMostProfitableDrop = (): Drop | null => {\r\n    const activeDrops = drops.filter(drop => drop.isActive);\r\n    if (activeDrops.length === 0) return null;\r\n    \r\n    return activeDrops.reduce((mostProfitable, current) => \r\n      current.income > mostProfitable.income ? current : mostProfitable\r\n    , activeDrops[0]);\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={{\r\n      balance,\r\n      setBalance,\r\n      ownedBusinesses,\r\n      setOwnedBusinesses,\r\n      availableBusinesses,\r\n      setAvailableBusinesses,\r\n      drops,\r\n      setDrops,\r\n      dropsStats,\r\n      totalIncomePerHour,\r\n      addBusiness,\r\n      removeBusiness,\r\n      updateBusiness,\r\n      getMostProfitableBusiness,\r\n      upgradeDropLevel,\r\n      renewDrop,\r\n      releaseDrop,\r\n      getMostProfitableDrop\r\n    }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\n// Хук для использования контекста\r\nexport const useGame = (): GameContextType => {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGame must be used within a GameProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default GameContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}