{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reko\\\\Desktop\\\\chtoto\\\\telegram-mini-app\\\\client\\\\src\\\\context\\\\GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Определение типа контекста\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Создание контекста\nconst GameContext = /*#__PURE__*/createContext(undefined);\n\n// Провайдер контекста\n\nexport const GameProvider = ({\n  children\n}) => {\n  _s();\n  const [balance, setBalance] = useState(1000);\n  const [ownedBusinesses, setOwnedBusinesses] = useState([]);\n  const [availableBusinesses, setAvailableBusinesses] = useState([]);\n  const [totalIncomePerHour, setTotalIncomePerHour] = useState(0);\n\n  // Рассчитываем общий доход от всех бизнесов\n  useEffect(() => {\n    const total = ownedBusinesses.reduce((sum, business) => sum + business.income_per_hour, 0);\n    setTotalIncomePerHour(total);\n  }, [ownedBusinesses]);\n\n  // Симуляция поступления дохода\n  useEffect(() => {\n    const incomeInterval = setInterval(() => {\n      if (totalIncomePerHour > 0) {\n        setBalance(prevBalance => {\n          const incomePerSecond = totalIncomePerHour / 3600;\n          return parseFloat((prevBalance + incomePerSecond).toFixed(2));\n        });\n      }\n    }, 1000);\n    return () => clearInterval(incomeInterval);\n  }, [totalIncomePerHour]);\n\n  // Функции для работы с бизнесами\n  const addBusiness = business => {\n    setOwnedBusinesses(prev => [...prev, business]);\n  };\n  const removeBusiness = businessId => {\n    setOwnedBusinesses(prev => prev.filter(b => b.business_id !== businessId));\n  };\n  const updateBusiness = updatedBusiness => {\n    setOwnedBusinesses(prev => prev.map(b => b.business_id === updatedBusiness.business_id ? updatedBusiness : b));\n  };\n  const getMostProfitableBusiness = () => {\n    if (ownedBusinesses.length === 0) return null;\n    return ownedBusinesses.reduce((mostProfitable, current) => current.income_per_hour > mostProfitable.income_per_hour ? current : mostProfitable, ownedBusinesses[0]);\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      balance,\n      setBalance,\n      ownedBusinesses,\n      setOwnedBusinesses,\n      availableBusinesses,\n      setAvailableBusinesses,\n      totalIncomePerHour,\n      addBusiness,\n      removeBusiness,\n      updateBusiness,\n      getMostProfitableBusiness\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n// Хук для использования контекста\n_s(GameProvider, \"nhRndmhU6KUB8K1U/JuI9C6jCdY=\");\n_c = GameProvider;\nexport const useGame = () => {\n  _s2();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n_s2(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default GameContext;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","GameContext","undefined","GameProvider","children","_s","balance","setBalance","ownedBusinesses","setOwnedBusinesses","availableBusinesses","setAvailableBusinesses","totalIncomePerHour","setTotalIncomePerHour","total","reduce","sum","business","income_per_hour","incomeInterval","setInterval","prevBalance","incomePerSecond","parseFloat","toFixed","clearInterval","addBusiness","prev","removeBusiness","businessId","filter","b","business_id","updateBusiness","updatedBusiness","map","getMostProfitableBusiness","length","mostProfitable","current","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGame","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Reko/Desktop/chtoto/telegram-mini-app/client/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { Business, AvailableBusiness } from '../types/business';\r\n\r\n// Определение типа контекста\r\ninterface GameContextType {\r\n  balance: number;\r\n  setBalance: (balance: number) => void;\r\n  ownedBusinesses: Business[];\r\n  setOwnedBusinesses: (businesses: Business[]) => void;\r\n  availableBusinesses: AvailableBusiness[];\r\n  setAvailableBusinesses: (businesses: AvailableBusiness[]) => void;\r\n  totalIncomePerHour: number;\r\n  addBusiness: (business: Business) => void;\r\n  removeBusiness: (businessId: string) => void;\r\n  updateBusiness: (updatedBusiness: Business) => void;\r\n  getMostProfitableBusiness: () => Business | null;\r\n}\r\n\r\n// Создание контекста\r\nconst GameContext = createContext<GameContextType | undefined>(undefined);\r\n\r\n// Провайдер контекста\r\ninterface GameProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\r\n  const [balance, setBalance] = useState<number>(1000);\r\n  const [ownedBusinesses, setOwnedBusinesses] = useState<Business[]>([]);\r\n  const [availableBusinesses, setAvailableBusinesses] = useState<AvailableBusiness[]>([]);\r\n  const [totalIncomePerHour, setTotalIncomePerHour] = useState<number>(0);\r\n\r\n  // Рассчитываем общий доход от всех бизнесов\r\n  useEffect(() => {\r\n    const total = ownedBusinesses.reduce((sum, business) => sum + business.income_per_hour, 0);\r\n    setTotalIncomePerHour(total);\r\n  }, [ownedBusinesses]);\r\n\r\n  // Симуляция поступления дохода\r\n  useEffect(() => {\r\n    const incomeInterval = setInterval(() => {\r\n      if (totalIncomePerHour > 0) {\r\n        setBalance(prevBalance => {\r\n          const incomePerSecond = totalIncomePerHour / 3600;\r\n          return parseFloat((prevBalance + incomePerSecond).toFixed(2));\r\n        });\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(incomeInterval);\r\n  }, [totalIncomePerHour]);\r\n\r\n  // Функции для работы с бизнесами\r\n  const addBusiness = (business: Business) => {\r\n    setOwnedBusinesses(prev => [...prev, business]);\r\n  };\r\n\r\n  const removeBusiness = (businessId: string) => {\r\n    setOwnedBusinesses(prev => prev.filter(b => b.business_id !== businessId));\r\n  };\r\n\r\n  const updateBusiness = (updatedBusiness: Business) => {\r\n    setOwnedBusinesses(prev => \r\n      prev.map(b => b.business_id === updatedBusiness.business_id ? updatedBusiness : b)\r\n    );\r\n  };\r\n\r\n  const getMostProfitableBusiness = (): Business | null => {\r\n    if (ownedBusinesses.length === 0) return null;\r\n    \r\n    return ownedBusinesses.reduce((mostProfitable, current) => \r\n      current.income_per_hour > mostProfitable.income_per_hour ? current : mostProfitable\r\n    , ownedBusinesses[0]);\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={{\r\n      balance,\r\n      setBalance,\r\n      ownedBusinesses,\r\n      setOwnedBusinesses,\r\n      availableBusinesses,\r\n      setAvailableBusinesses,\r\n      totalIncomePerHour,\r\n      addBusiness,\r\n      removeBusiness,\r\n      updateBusiness,\r\n      getMostProfitableBusiness\r\n    }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\n// Хук для использования контекста\r\nexport const useGame = (): GameContextType => {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGame must be used within a GameProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default GameContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}