{"ast":null,"code":"export let DropQuality = /*#__PURE__*/function (DropQuality) {\n  DropQuality[\"COMMON\"] = \"common\";\n  DropQuality[\"RARE\"] = \"rare\";\n  DropQuality[\"EPIC\"] = \"epic\";\n  DropQuality[\"LEGENDARY\"] = \"legendary\";\n  return DropQuality;\n}({});\nexport const DROP_QUALITY_MULTIPLIERS = {\n  [DropQuality.COMMON]: 1.0,\n  [DropQuality.RARE]: 2.5,\n  [DropQuality.EPIC]: 6.0,\n  [DropQuality.LEGENDARY]: 15.0\n};\nexport const DROP_QUALITY_NAMES = {\n  [DropQuality.COMMON]: 'Обычный',\n  [DropQuality.RARE]: 'Редкий',\n  [DropQuality.EPIC]: 'Эпический',\n  [DropQuality.LEGENDARY]: 'Легендарный'\n};\nexport const DROP_QUALITY_COLORS = {\n  [DropQuality.COMMON]: '#a0a0a0',\n  [DropQuality.RARE]: '#43a0ff',\n  [DropQuality.EPIC]: '#c43bff',\n  [DropQuality.LEGENDARY]: '#ffb626'\n};\nexport const BASE_DROP_INCOME = 10;\n\n// Интерфейс для дропов в старом формате, поддерживаемый для совместимости\n\n// Основной интерфейс для дропов\n\n// Интерфейс для пропсов компонента DropCard\n\n// Расчет дохода от дропа\nexport const calculateDropIncome = (level, quality) => {\n  return BASE_DROP_INCOME * level * DROP_QUALITY_MULTIPLIERS[quality];\n};\n\n// Расчет стоимости апгрейда дропа\nexport const calculateUpgradePrice = (level, quality) => {\n  const basePrice = 500;\n  const qualityMultiplier = DROP_QUALITY_MULTIPLIERS[quality];\n  return Math.round(basePrice * level * (1 + level * 0.2) * qualityMultiplier);\n};\n\n// Расчет стоимости продления дропа\nexport const calculateRenewPrice = quality => {\n  const basePrice = 200;\n  const qualityMultiplier = DROP_QUALITY_MULTIPLIERS[quality];\n  return Math.round(basePrice * qualityMultiplier);\n};\n\n// Функция форматирования оставшегося времени\nexport const formatTimeLeft = expiresAt => {\n  const now = new Date();\n  const diff = expiresAt.getTime() - now.getTime();\n  if (diff <= 0) {\n    return 'Истек';\n  }\n  const hours = Math.floor(diff / (1000 * 60 * 60));\n  const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n  if (hours > 0) {\n    return `${hours} ч ${minutes} мин`;\n  } else {\n    return `${minutes} мин`;\n  }\n};","map":{"version":3,"names":["DropQuality","DROP_QUALITY_MULTIPLIERS","COMMON","RARE","EPIC","LEGENDARY","DROP_QUALITY_NAMES","DROP_QUALITY_COLORS","BASE_DROP_INCOME","calculateDropIncome","level","quality","calculateUpgradePrice","basePrice","qualityMultiplier","Math","round","calculateRenewPrice","formatTimeLeft","expiresAt","now","Date","diff","getTime","hours","floor","minutes"],"sources":["C:/Users/Reko/Desktop/chtoto/telegram-mini-app/client/src/types/drop.ts"],"sourcesContent":["export enum DropQuality {\r\n  COMMON = 'common',\r\n  RARE = 'rare',\r\n  EPIC = 'epic',\r\n  LEGENDARY = 'legendary'\r\n}\r\n\r\nexport const DROP_QUALITY_MULTIPLIERS = {\r\n  [DropQuality.COMMON]: 1.0,\r\n  [DropQuality.RARE]: 2.5,\r\n  [DropQuality.EPIC]: 6.0,\r\n  [DropQuality.LEGENDARY]: 15.0\r\n};\r\n\r\nexport const DROP_QUALITY_NAMES = {\r\n  [DropQuality.COMMON]: 'Обычный',\r\n  [DropQuality.RARE]: 'Редкий',\r\n  [DropQuality.EPIC]: 'Эпический',\r\n  [DropQuality.LEGENDARY]: 'Легендарный'\r\n};\r\n\r\nexport const DROP_QUALITY_COLORS = {\r\n  [DropQuality.COMMON]: '#a0a0a0',\r\n  [DropQuality.RARE]: '#43a0ff',\r\n  [DropQuality.EPIC]: '#c43bff',\r\n  [DropQuality.LEGENDARY]: '#ffb626'\r\n};\r\n\r\nexport const BASE_DROP_INCOME = 10;\r\n\r\n// Интерфейс для дропов в старом формате, поддерживаемый для совместимости\r\nexport interface OldDrop {\r\n  drop_id: string;\r\n  owner_id: string;\r\n  invitee_id: string;\r\n  invitee_name: string;\r\n  quality: string;\r\n  level: number;\r\n  income_multiplier: number;\r\n  income_per_hour: number;\r\n  created_at: Date;\r\n  avatar_url?: string;\r\n  is_active: boolean;\r\n  last_income_time: Date;\r\n}\r\n\r\n// Основной интерфейс для дропов\r\nexport interface Drop {\r\n  id: string;\r\n  name: string;\r\n  quality: DropQuality;\r\n  level: number;\r\n  avatarUrl?: string;\r\n  income: number;\r\n  expiresAt: Date;\r\n  isActive: boolean;\r\n  upgradePrice: number;\r\n  renewPrice: number;\r\n}\r\n\r\n// Интерфейс для пропсов компонента DropCard\r\nexport interface DropCardProps {\r\n  drop: Drop;\r\n  onUpgrade: (dropId: string) => void;\r\n  onRenew: (dropId: string) => void;\r\n  onRelease: (dropId: string) => void;\r\n}\r\n\r\n// Расчет дохода от дропа\r\nexport const calculateDropIncome = (level: number, quality: DropQuality): number => {\r\n  return BASE_DROP_INCOME * level * DROP_QUALITY_MULTIPLIERS[quality];\r\n};\r\n\r\n// Расчет стоимости апгрейда дропа\r\nexport const calculateUpgradePrice = (level: number, quality: DropQuality): number => {\r\n  const basePrice = 500;\r\n  const qualityMultiplier = DROP_QUALITY_MULTIPLIERS[quality];\r\n  return Math.round(basePrice * level * (1 + (level * 0.2)) * qualityMultiplier);\r\n};\r\n\r\n// Расчет стоимости продления дропа\r\nexport const calculateRenewPrice = (quality: DropQuality): number => {\r\n  const basePrice = 200;\r\n  const qualityMultiplier = DROP_QUALITY_MULTIPLIERS[quality];\r\n  return Math.round(basePrice * qualityMultiplier);\r\n};\r\n\r\n// Функция форматирования оставшегося времени\r\nexport const formatTimeLeft = (expiresAt: Date): string => {\r\n  const now = new Date();\r\n  const diff = expiresAt.getTime() - now.getTime();\r\n  \r\n  if (diff <= 0) {\r\n    return 'Истек';\r\n  }\r\n  \r\n  const hours = Math.floor(diff / (1000 * 60 * 60));\r\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n  \r\n  if (hours > 0) {\r\n    return `${hours} ч ${minutes} мин`;\r\n  } else {\r\n    return `${minutes} мин`;\r\n  }\r\n};\r\n\r\nexport interface DropsStats {\r\n  totalDrops: number;\r\n  activeDrops: number;\r\n  lostDrops24h: number;\r\n  totalIncome: number;\r\n} "],"mappings":"AAAA,WAAYA,WAAW,0BAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAOvB,OAAO,MAAMC,wBAAwB,GAAG;EACtC,CAACD,WAAW,CAACE,MAAM,GAAG,GAAG;EACzB,CAACF,WAAW,CAACG,IAAI,GAAG,GAAG;EACvB,CAACH,WAAW,CAACI,IAAI,GAAG,GAAG;EACvB,CAACJ,WAAW,CAACK,SAAS,GAAG;AAC3B,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG;EAChC,CAACN,WAAW,CAACE,MAAM,GAAG,SAAS;EAC/B,CAACF,WAAW,CAACG,IAAI,GAAG,QAAQ;EAC5B,CAACH,WAAW,CAACI,IAAI,GAAG,WAAW;EAC/B,CAACJ,WAAW,CAACK,SAAS,GAAG;AAC3B,CAAC;AAED,OAAO,MAAME,mBAAmB,GAAG;EACjC,CAACP,WAAW,CAACE,MAAM,GAAG,SAAS;EAC/B,CAACF,WAAW,CAACG,IAAI,GAAG,SAAS;EAC7B,CAACH,WAAW,CAACI,IAAI,GAAG,SAAS;EAC7B,CAACJ,WAAW,CAACK,SAAS,GAAG;AAC3B,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAG,EAAE;;AAElC;;AAgBA;;AAcA;;AAQA;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAACC,KAAa,EAAEC,OAAoB,KAAa;EAClF,OAAOH,gBAAgB,GAAGE,KAAK,GAAGT,wBAAwB,CAACU,OAAO,CAAC;AACrE,CAAC;;AAED;AACA,OAAO,MAAMC,qBAAqB,GAAGA,CAACF,KAAa,EAAEC,OAAoB,KAAa;EACpF,MAAME,SAAS,GAAG,GAAG;EACrB,MAAMC,iBAAiB,GAAGb,wBAAwB,CAACU,OAAO,CAAC;EAC3D,OAAOI,IAAI,CAACC,KAAK,CAACH,SAAS,GAAGH,KAAK,IAAI,CAAC,GAAIA,KAAK,GAAG,GAAI,CAAC,GAAGI,iBAAiB,CAAC;AAChF,CAAC;;AAED;AACA,OAAO,MAAMG,mBAAmB,GAAIN,OAAoB,IAAa;EACnE,MAAME,SAAS,GAAG,GAAG;EACrB,MAAMC,iBAAiB,GAAGb,wBAAwB,CAACU,OAAO,CAAC;EAC3D,OAAOI,IAAI,CAACC,KAAK,CAACH,SAAS,GAAGC,iBAAiB,CAAC;AAClD,CAAC;;AAED;AACA,OAAO,MAAMI,cAAc,GAAIC,SAAe,IAAa;EACzD,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,MAAMC,IAAI,GAAGH,SAAS,CAACI,OAAO,CAAC,CAAC,GAAGH,GAAG,CAACG,OAAO,CAAC,CAAC;EAEhD,IAAID,IAAI,IAAI,CAAC,EAAE;IACb,OAAO,OAAO;EAChB;EAEA,MAAME,KAAK,GAAGT,IAAI,CAACU,KAAK,CAACH,IAAI,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;EACjD,MAAMI,OAAO,GAAGX,IAAI,CAACU,KAAK,CAAEH,IAAI,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,IAAK,IAAI,GAAG,EAAE,CAAC,CAAC;EAEnE,IAAIE,KAAK,GAAG,CAAC,EAAE;IACb,OAAO,GAAGA,KAAK,MAAME,OAAO,MAAM;EACpC,CAAC,MAAM;IACL,OAAO,GAAGA,OAAO,MAAM;EACzB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}